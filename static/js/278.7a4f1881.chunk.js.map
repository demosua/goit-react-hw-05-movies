{"version":3,"file":"static/js/278.7a4f1881.chunk.js","mappings":"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","sources":["api/api.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/CastInfo/CastInfo.styled.jsx","components/CastInfo/CastInfo.jsx","pages/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '1315643545b87f640bd81c2c08cb68dd';\n\nasync function getTrendingMovies() {\n    try {\n      const url = `trending/movie/day?api_key=${API_KEY}`;\n      const response = await axios.get(url);\n      if (response) {return response.data.results;}\n        return Promise.reject(new Error(`There are no results for trending movies`));\n    } catch (error) {\n      return error;\n    }\n}\n\nasync function getMoviesSearch(movie) {\n  try {\n    const url = `search/movie?api_key=${API_KEY}&language=en-US&query=${movie}&page=1&include_adult=false`;\n    const response = await axios.get(url);\n    if (response.data.results.length > 0) {return response.data.results;}\n      return Promise.reject(new Error(`There are no results for movie you are searching for`));\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function getMovieDetails(movie_id) {\n  try {\n    const url = `movie/${movie_id}?api_key=${API_KEY}`;\n    const response = await axios.get(url);\n    if (response) {return response.data;}\n      return Promise.reject(new Error(`There are no results for trending movies`));\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function getMovieCredits(movie_id) {\n  try {\n    const url = `movie/${movie_id}/credits?api_key=${API_KEY}`;\n    const response = await axios.get(url);\n    if(response) {return response.data;}\n      return Promise.reject(new Error(`Error occured while fetching casting actors`));\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function getMovieReviews(movie_id) {\n  try {\n    const url = `movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n    const response = await axios.get(url);\n    if (response) {return response.data.results;}\n      return Promise.reject(new Error(`Error occured while fetching reviews`));\n  } catch (error) {\n    return error;\n  }\n}\n\nconst api = {\n  getTrendingMovies,\n  getMoviesSearch,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n\nexport default api;","import styled from '@emotion/styled';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  ${'' /* align-items: center;\n  width: 100vw;\n  height: 100vh; */}\n`;","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderContainer>\n        <ThreeDots color=\"#3f51b5\" height={80} width={80} />\n    </LoaderContainer>\n  )\n};\n  \nexport default Loader;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\nexport const Ul = styled.div`\n  // display: flex;\n\n`;","import propTypes from 'prop-types';\nimport {Wrapper, Ul} from './CastInfo.styled';\nconst CastInfo = ({ credits }) => {\nconst actors = credits.cast.filter(actor => actor.known_for_department === \"Acting\");\n\n  return (\n    <Wrapper>\n        <Ul>\n          {actors.length > 0\n            ? actors.map(actor =>\n            <li key ={actor.id}>\n              <p>{actor.profile_path\n              ? <img src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2/${actor.profile_path}`} alt={actor.name} width={40}/>\n              : <img src={`https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg\n              `} alt={actor.name} width={40}/>}</p>\n              <p>{actor.name}</p>\n              <p>{actor.character}</p>\n            </li>)\n          : <p>We don't have any cast info for this movie yet.</p>}\n        </Ul>\n    </Wrapper>\n \n  );\n};\n\nexport default CastInfo;\n\nCastInfo.propTypes = {\n  credits: propTypes.shape({\n      id: propTypes.number.isRequired,\n      cast: propTypes.arrayOf(\n        propTypes.shape({\n          name: propTypes.string.isRequired,\n          character: propTypes.string.isRequired,\n          profile_path: function(props, propName, componentName) {\n            const propValue = props[propName]\n              if (propValue === null) return\n              if (typeof propValue === 'string') return\n              return new Error(`${componentName} only accepts null or string`)\n          }\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n}","import { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport Loader from '../components/Loader';\nimport  CastInfo from '../components/CastInfo';\nimport api from '../api/api';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState(null);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    async function fetchCreditsDetails(){\n      setStatus('pending');\n      try{\n        const credits = await api.getMovieCredits(movieId);\n        setCredits(credits);\n      } catch(error) {\n          setStatus('rejected');\n          toast.error(error.message);\n      }finally{\n        setStatus('resolved');\n      }\n    }\n    fetchCreditsDetails();\n  }, [movieId])\n\n  return (\n    <>\n      {status === 'rejected' && <ToastContainer autoClose={1000} />}\n      {status === 'pending' && <Loader />}\n      {status === 'resolved' && <CastInfo credits={credits} />}\n    </>\n  );\n}\nexport default Cast;"],"names":["axios","API_KEY","getTrendingMovies","url","response","data","results","Promise","reject","Error","getMoviesSearch","movie","length","getMovieDetails","movie_id","getMovieCredits","getMovieReviews","api","LoaderContainer","styled","color","height","width","Wrapper","Ul","actors","credits","cast","filter","actor","known_for_department","map","profile_path","src","alt","name","character","id","movieId","useParams","useState","setCredits","status","setStatus","useEffect","toast","message","fetchCreditsDetails","autoClose","Loader"],"sourceRoot":""}